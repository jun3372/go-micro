// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: WalletHandler.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for WalletService service

type WalletService interface {
	// 创建
	Created(ctx context.Context, in *WalletCreatedRequest, opts ...client.CallOption) (*WalletCreatedResponse, error)
	//增长
	Increase(ctx context.Context, in *WalletIncreaseRequest, opts ...client.CallOption) (*WalletIncreaseResponse, error)
	// 减少
	Decrease(ctx context.Context, in *WalletDecreaseRequest, opts ...client.CallOption) (*WalletDecreaseResponse, error)
}

type walletService struct {
	c    client.Client
	name string
}

func NewWalletService(name string, c client.Client) WalletService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "pb"
	}
	return &walletService{
		c:    c,
		name: name,
	}
}

func (c *walletService) Created(ctx context.Context, in *WalletCreatedRequest, opts ...client.CallOption) (*WalletCreatedResponse, error) {
	req := c.c.NewRequest(c.name, "WalletService.Created", in)
	out := new(WalletCreatedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) Increase(ctx context.Context, in *WalletIncreaseRequest, opts ...client.CallOption) (*WalletIncreaseResponse, error) {
	req := c.c.NewRequest(c.name, "WalletService.Increase", in)
	out := new(WalletIncreaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) Decrease(ctx context.Context, in *WalletDecreaseRequest, opts ...client.CallOption) (*WalletDecreaseResponse, error) {
	req := c.c.NewRequest(c.name, "WalletService.Decrease", in)
	out := new(WalletDecreaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WalletService service

type WalletServiceHandler interface {
	// 创建
	Created(context.Context, *WalletCreatedRequest, *WalletCreatedResponse) error
	//增长
	Increase(context.Context, *WalletIncreaseRequest, *WalletIncreaseResponse) error
	// 减少
	Decrease(context.Context, *WalletDecreaseRequest, *WalletDecreaseResponse) error
}

func RegisterWalletServiceHandler(s server.Server, hdlr WalletServiceHandler, opts ...server.HandlerOption) error {
	type walletService interface {
		Created(ctx context.Context, in *WalletCreatedRequest, out *WalletCreatedResponse) error
		Increase(ctx context.Context, in *WalletIncreaseRequest, out *WalletIncreaseResponse) error
		Decrease(ctx context.Context, in *WalletDecreaseRequest, out *WalletDecreaseResponse) error
	}
	type WalletService struct {
		walletService
	}
	h := &walletServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&WalletService{h}, opts...))
}

type walletServiceHandler struct {
	WalletServiceHandler
}

func (h *walletServiceHandler) Created(ctx context.Context, in *WalletCreatedRequest, out *WalletCreatedResponse) error {
	return h.WalletServiceHandler.Created(ctx, in, out)
}

func (h *walletServiceHandler) Increase(ctx context.Context, in *WalletIncreaseRequest, out *WalletIncreaseResponse) error {
	return h.WalletServiceHandler.Increase(ctx, in, out)
}

func (h *walletServiceHandler) Decrease(ctx context.Context, in *WalletDecreaseRequest, out *WalletDecreaseResponse) error {
	return h.WalletServiceHandler.Decrease(ctx, in, out)
}
