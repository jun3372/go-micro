// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: UserHander.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserService service

type UserService interface {
	// 用户注册
	UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...client.CallOption) (*UserRegisterResponse, error)
	// 查询用户
	UserFind(ctx context.Context, in *UserFindByWhereRequest, opts ...client.CallOption) (*UserFindByWhereResponse, error)
	// 更新Id查询用户列表
	UserFindIds(ctx context.Context, in *UserFindByIdsRequest, opts ...client.CallOption) (*UserFindByIdsResponse, error)
	// 用户登录
	UserLogin(ctx context.Context, in *UserLoginRequest, opts ...client.CallOption) (*UserLoginResponse, error)
	// 用户修改信息
	UserUpdateProfile(ctx context.Context, in *UserUpdateProfileRequest, opts ...client.CallOption) (*UserUpdateProfileResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "pb"
	}
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...client.CallOption) (*UserRegisterResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UserRegister", in)
	out := new(UserRegisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UserFind(ctx context.Context, in *UserFindByWhereRequest, opts ...client.CallOption) (*UserFindByWhereResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UserFind", in)
	out := new(UserFindByWhereResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UserFindIds(ctx context.Context, in *UserFindByIdsRequest, opts ...client.CallOption) (*UserFindByIdsResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UserFindIds", in)
	out := new(UserFindByIdsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UserLogin(ctx context.Context, in *UserLoginRequest, opts ...client.CallOption) (*UserLoginResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UserLogin", in)
	out := new(UserLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UserUpdateProfile(ctx context.Context, in *UserUpdateProfileRequest, opts ...client.CallOption) (*UserUpdateProfileResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UserUpdateProfile", in)
	out := new(UserUpdateProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	// 用户注册
	UserRegister(context.Context, *UserRegisterRequest, *UserRegisterResponse) error
	// 查询用户
	UserFind(context.Context, *UserFindByWhereRequest, *UserFindByWhereResponse) error
	// 更新Id查询用户列表
	UserFindIds(context.Context, *UserFindByIdsRequest, *UserFindByIdsResponse) error
	// 用户登录
	UserLogin(context.Context, *UserLoginRequest, *UserLoginResponse) error
	// 用户修改信息
	UserUpdateProfile(context.Context, *UserUpdateProfileRequest, *UserUpdateProfileResponse) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		UserRegister(ctx context.Context, in *UserRegisterRequest, out *UserRegisterResponse) error
		UserFind(ctx context.Context, in *UserFindByWhereRequest, out *UserFindByWhereResponse) error
		UserFindIds(ctx context.Context, in *UserFindByIdsRequest, out *UserFindByIdsResponse) error
		UserLogin(ctx context.Context, in *UserLoginRequest, out *UserLoginResponse) error
		UserUpdateProfile(ctx context.Context, in *UserUpdateProfileRequest, out *UserUpdateProfileResponse) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) UserRegister(ctx context.Context, in *UserRegisterRequest, out *UserRegisterResponse) error {
	return h.UserServiceHandler.UserRegister(ctx, in, out)
}

func (h *userServiceHandler) UserFind(ctx context.Context, in *UserFindByWhereRequest, out *UserFindByWhereResponse) error {
	return h.UserServiceHandler.UserFind(ctx, in, out)
}

func (h *userServiceHandler) UserFindIds(ctx context.Context, in *UserFindByIdsRequest, out *UserFindByIdsResponse) error {
	return h.UserServiceHandler.UserFindIds(ctx, in, out)
}

func (h *userServiceHandler) UserLogin(ctx context.Context, in *UserLoginRequest, out *UserLoginResponse) error {
	return h.UserServiceHandler.UserLogin(ctx, in, out)
}

func (h *userServiceHandler) UserUpdateProfile(ctx context.Context, in *UserUpdateProfileRequest, out *UserUpdateProfileResponse) error {
	return h.UserServiceHandler.UserUpdateProfile(ctx, in, out)
}
